{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/canvas.js","webpack:///./src/graph.js","webpack:///./src/map.js","webpack:///./src/mathutils.js","webpack:///./src/solver.js"],"names":["Solver","require","Map","Graph","reset","document","getElementById","score","customSolution","copyMap","canvas","querySelector","width","innerWidth","height","innerHeight","map","graph","activeSolution","frame","init","copyMapValuesToClipboard","navigator","clipboard","writeText","JSON","stringify","houses","then","console","log","err","error","isValidSolution","solution","sortedSolution","Float32Array","sort","length","i","setSolution","animate","requestAnimationFrame","undefined","moveSnowPlow","clear","draw","value","Math","round","onclick","oninput","parse","splitSolve","_canvas","_ctx","getContext","_width","_height","_map","_snowPlowSize","step","max","min","lastIndex","snowplotAtX","getHouseBetween","fillStyle","fillRect","avgTime","j","lastClean","snowPlowX","rect","fill","module","exports","MathUtils","size","_size","_houses","_lastClean","Array","_snowPlowX","_min","_max","_time","_score","initHouses","initLastClean","gaussianRandom","x","prevSnowPlowX","abs","startIndex","maxValue","results","push","mean","stdev","y1","y2","x1","x2","w","random","sqrt","steps","arr","begin","end","fillInterval","list","from","newList","snowplowPos","closestPos","closestIndex","splice"],"mappings":"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","file":"./js/canvas.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/canvas.js\");\n","const Solver = require(\"./solver\");\nconst Map = require('./map.js');\nconst Graph = require('./graph.js');\n\nconst reset = document.getElementById('reset');\nconst score = document.getElementById('score');\nconst customSolution = document.getElementById('customsolution');\nconst copyMap = document.getElementById('copymap');\nconst canvas = document.querySelector('canvas');\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\n\nlet map = new Map(1000);\nlet graph = new Graph(canvas, map);\nlet activeSolution;\nlet frame;\n\nfunction init() {\n    map.reset();\n    frame = 0;\n}\n\nfunction copyMapValuesToClipboard() {\n    navigator.clipboard.writeText(JSON.stringify(map.houses)).then(function() {\n        console.log('Async: Copying to clipboard was successful!');\n    }, function(err) {\n        console.error('Async: Could not copy text: ', err);\n    });\n}\n\nfunction isValidSolution(solution) {\n    const sortedSolution = new Float32Array(solution).sort();\n    if (solution.length !== map.houses.length) {\n        console.error(\"Solution cleans too few / much houses! Expected \" + map.houses.length + \" houses but got \" + solution.length);\n        return false;\n    }\n    for (let i = 0; i < solution.length; ++i) {\n        if (map.houses[i] !== sortedSolution[i]) {\n            console.error(\"Solution does not clean house at \" + map.houses[i]);\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction setSolution(solution) {\n    if (isValidSolution(solution)) {\n        activeSolution = solution;\n        init();\n    }\n}\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    if (activeSolution === undefined || activeSolution === null) {\n        return;\n    }\n    map.moveSnowPlow(activeSolution[frame]);\n    graph.clear();\n    graph.draw();\n    if (frame < activeSolution.length) {\n        ++frame;\n    }\n    score.value = Math.round(map.score);\n\n}\n\nreset.onclick = function() {init();};\ncopyMap.onclick = function() {copyMapValuesToClipboard();};\ncustomSolution.oninput = function() {setSolution(JSON.parse(customSolution.value));};\n\nsetSolution(Solver.splitSolve(map));\nanimate();\n","class Graph {\n\n  constructor(canvas, map) {\n    this._canvas = canvas;\n    this._ctx = canvas.getContext(\"2d\");\n    this._width = canvas.width;\n    this._width = 300;\n    this._height = canvas.height;\n    this._map = map;\n    this._snowPlowSize = 10;\n  }\n\n  draw() {\n    const step = (this._map.max - this._map.min) / this._width;\n    let max = this._map.min;\n    let lastIndex = 0;\n    let snowplotAtX = -1;\n    for (let i = 0; i < this._width; ++i) {\n      max += step;\n      const houses = this._map.getHouseBetween(lastIndex, max);\n      this._ctx.fillStyle = \"rgba(120,120,120,0.62)\";\n      this._ctx.fillRect(i, this._height / 2, 1, -(houses.length * 10 + 1));\n      let avgTime = 0;\n      for (let j = 0; j < houses.length; ++j) {\n        avgTime += (this._map.lastClean[houses[j]]);\n      }\n      //avgTime /= houses.length;\n      avgTime /= 1000;\n      if (avgTime > 200) {\n        avgTime = 200;\n      }\n      this._ctx.fillStyle = \"#FF0000\";\n      this._ctx.fillRect(i, this._height / 2, 1, avgTime);\n      if (houses.length > 0) {\n        lastIndex = houses[houses.length - 1] + 1;\n      }\n      if (snowplotAtX < 0 && this._map.houses[lastIndex] >= this._map.snowPlowX && this._map.snowPlowX <= max) {\n        snowplotAtX = i;\n      }\n    }\n    if (snowplotAtX >= 0) {\n      this._ctx.fillStyle = \"rgb(0,255,11)\";\n      this._ctx.fillRect(snowplotAtX - this._snowPlowSize, this._height / 2 - this._snowPlowSize, 20, 20);\n    }\n  }\n\n  clear() {\n    this._ctx.rect(0 - this._snowPlowSize, 0, this._width + this._snowPlowSize, this._height);\n    this._ctx.fillStyle = 'rgb(255, 255, 255)';\n    this._ctx.fill();\n  }\n}\n\nmodule.exports = Graph;\n\n","const MathUtils = require('./mathutils.js');\n\nclass Map {\n    constructor(size) {\n        this._size = size;\n        this._houses = new Float32Array(size);\n        this._lastClean = new Array(size);\n        this._snowPlowX = 0;\n        this._min = 0;\n        this._max = 0;\n        this._time = 0;\n        this._score = 0;\n        this.initHouses();\n        this.initLastClean();\n    }\n\n    reset() {\n        this._snowPlowX = 0;\n        this._time = 0;\n        this._score = 0;\n        this.initLastClean();\n    }\n\n    initHouses() {\n        for (let i = 0; i < this._size; ++i) {\n            this._houses[i] = MathUtils.gaussianRandom(0, 1000);\n            if (this._houses[i] > this._max || i === 0) {\n                this._max = this._houses[i];\n            }\n            if (this._houses[i] < this._min || i === 0) {\n                this._min = this._houses[i];\n            }\n        }\n        this._houses.sort();\n    }\n\n    initLastClean() {\n        for (let i = 0; i < this._size; ++i) {\n            this._lastClean[i] = 0;\n        }\n    }\n\n    moveSnowPlow(x) {\n        const prevSnowPlowX = this._snowPlowX;\n        this._snowPlowX = x;\n        for (let i = 0; i < this._size && this._houses[i] <= x; ++i) {\n            if (this.houses[i] === x) {\n                this._time += Math.abs(prevSnowPlowX - this.snowPlowX);\n                if (this.lastClean[i] === 0) {\n                    this._score += this._time;\n                    this.lastClean[i] = this._time;\n                }\n            }\n        }\n    }\n\n    getHouseBetween(startIndex, maxValue) {\n        let results = [];\n        for (let i = startIndex; i < this._size && this._houses[i] <= maxValue; ++i) {\n            results.push(i);\n        }\n        return results;\n    }\n\n    get lastClean() {\n        return this._lastClean;\n    }\n\n    get min() {\n        return this._min;\n    }\n\n    get max() {\n        return this._max;\n    }\n\n    get time() {\n        return this._time;\n    }\n\n    get size() {\n        return this._size;\n    }\n\n    get snowPlowX() {\n        return this._snowPlowX;\n    }\n\n    get score() {\n        return this._score;\n    }\n\n    get houses() {\n        return this._houses;\n    }\n}\n\nmodule.exports = Map;\n\n","class MathUtils {\n    static gaussianRandom(mean, stdev) {\n        let y1;\n        let y2;\n        let x1;\n        let x2;\n        let w;\n\n        do {\n            x1 = 2.0 * Math.random() - 1.0;\n            x2 = 2.0 * Math.random() - 1.0;\n            w = x1 * x1 + x2 * x2;\n        } while (w >= 1.0);\n        w = Math.sqrt((-2.0 * Math.log(w)) / w);\n        y1 = x1 * w;\n        y2 = x2 * w;\n\n        return mean + stdev * y1;\n    }\n}\n\nmodule.exports = MathUtils;\n","class Solver {\n    static stupidSolve(map) {\n        const houses = map.houses;\n        let steps = [];\n        for (let i = 0; i < houses.length; ++i) {\n            steps.push(houses[i]);\n        }\n        return steps;\n    }\n\n    static fillInterval(arr, houses, begin, end) {\n        if (begin > end) {\n            for (let i = begin; i >= end; --i) {\n                arr.push(houses[i]);\n            }\n        } else {\n            for (let i = begin; i <= end; ++i) {\n                arr.push(houses[i]);\n            }\n        }\n    }\n\n    static splitSolve(map) {\n        const houses = map.houses;\n        let steps = [];\n        // todo make it not hard coded\n        Solver.fillInterval(steps, houses,500, 700);\n        Solver.fillInterval(steps,houses,499, 300);\n        Solver.fillInterval(steps,houses, 701, 800);\n        Solver.fillInterval(steps,houses, 299, 100);\n        Solver.fillInterval(steps,houses, 801, 999);\n        Solver.fillInterval(steps,houses,99, 0);\n        return steps;\n    }\n\n    static greedySolve(map) {\n        const list = Array.from(map.houses);\n        let newList = [];\n        let snowplowPos = 0;\n        let closestPos = list[0];\n        let closestIndex = 0;\n\n        while (list.length > 0) {\n            closestPos = list[0];\n            closestIndex = 0;\n            for (let i = 0; i< list.length; ++i) {\n                if (Math.abs(closestPos - snowplowPos) > Math.abs(list[i] - snowplowPos)) {\n                    closestPos = list[i];\n                    closestIndex = i;\n                }\n                ++i;\n            }\n            snowplowPos = closestPos;\n            newList.push(list[closestIndex]);\n            list.splice(closestIndex, 1);\n        }\n        return (newList)\n    }\n}\n\nmodule.exports = Solver;\n"],"sourceRoot":""}